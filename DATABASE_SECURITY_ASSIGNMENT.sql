DROP SCHEMA IF EXISTS COMPANY;
CREATE SCHEMA COMPANY;
USE COMPANY;

DROP TABLE IF EXISTS EMPLOYEE;

CREATE TABLE EMPLOYEE  (
											      EMPLOYEE_ID INT PRIMARY KEY AUTO_INCREMENT, 
												  F_NAME VARCHAR(30) NOT NULL,
                                                  M_NAME VARCHAR(30) NULL,
                                                  L_NAME VARCHAR(30) NOT NULL,
                                                  BIRTHDAY DATE, 
                                                  GENDER VARCHAR(1),
                                                  YEARS_AT_COMPANY INT,
                                                  SOCIAL INT,
                                                  SALARY DECIMAL(24,2),
                                                  FAV_FLAV VARCHAR(30)
                                                  );

INSERT INTO EMPLOYEE (F_NAME, M_NAME, L_NAME, BIRTHDAY, GENDER, 
											 YEARS_AT_COMPANY, SOCIAL, SALARY,FAV_FLAV)

VALUES ('DANIEL', 'G', 'SCOTT', '1994-11-28', 'M', 1, 333333333, 55000.00, 'VANILLA'),
			   ('CHARLES', 'LEO', 'SMITH', '1984-11-30', 'M', 3, 444444444, 70000.00, 'CHOCOLATE'),
               ('SASHA','LEA','KARDASHIAN', '1991-02-23', 'F', 2, 555555555, 30000.00, 'COFFEE'),
               ('LISA','DANIELLE','FOX', '1978-10-24','F', 10, 666666666, 100000.00, 'STRAWBERRY'),
               ('ALEXIS', NULL, 'JACOBS', '1990-07-23', 'F', 2, 777777777, 65000, 'CHOCOLATE') ;
               
SELECT * FROM EMPLOYEE;

####################STORED PROCEDURE##########################################
DELIMITER //
DROP PROCEDURE IF EXISTS OVERPAID//

CREATE PROCEDURE OVERPAID()
BEGIN
  SELECT EMPLOYEE_ID FROM EMPLOYEE
  WHERE SALARY > 50000 AND BIRTHDAY > 1990-01-01  AND YEARS_AT_COMPANY <= 2;
END //
DELIMITER ;

Call OVERPAID();

####################VIEW 1##########################################
CREATE OR REPLACE VIEW TOTALSALARY AS
    SELECT 
				   EMPLOYEE_ID, 
				   CONCAT(F_NAME, ' ', L_NAME) AS NAME,
                   SUM(YEARS_AT_COMPANY * SALARY) TOTAL_SALARY,
                   YEARS_AT_COMPANY
    FROM EMPLOYEE
    GROUP BY EMPLOYEE_ID
    ORDER BY TOTAL_SALARY;

##SELECT * FROM TOTALSALARY;    

SELECT * FROM TOTALSALARY WHERE YEARS_AT_COMPANY >= 5;
####################VIEW 2##########################################
CREATE OR REPLACE VIEW WEEKLY_CAKE_ORDERS AS
	SELECT
				  
                  CONCAT(F_NAME, ' ', L_NAME) AS NAME,
                  DATE_FORMAT(BIRTHDAY, '%m-%d'),
                  FAV_FLAV
                  
	FROM EMPLOYEE
    ### WHERE CLAUSE WAS TAKEN FROM Rakesh Vishnoi ON STACK OVERFLOW (https://stackoverflow.com/users/3787786/rakesh
				WHERE DATE_FORMAT(BIRTHDAY, '%m-%d') >= DATE_FORMAT(NOW(), '%m-%d') 
				AND DATE_FORMAT(BIRTHDAY, '%m-%d') <= DATE_FORMAT((NOW() + INTERVAL +7 DAY), '%m-%d')
				ORDER BY DATE_FORMAT(BIRTHDAY, '%m-%d') ASC;
### SHOWS ALL BIRTHDAYS IN THE COMING 7 DAYS WITH NAME AND FAVORITE CAKE FLAVOR
##SELECT * FROM WEEKLY_CAKE_ORDERS;

### COUNTS HOW MANY BIRTHDAYS ARE IN THE COMING 7 DAYS
SELECT COUNT(*) FROM WEEKLY_CAKE_ORDERS;

################CREATE MEMBER OF HR FINANCE TEAM########################
DROP USER IF EXISTS HR_FINANCE;
CREATE USER HR_FINANCE IDENTIFIED BY 'PASSword';
SELECT HOST, USER FROM MYSQL.USER;

SHOW GRANTS FOR HR_FINANCE;

GRANT
EXECUTE ON PROCEDURE COMPANY.OVERPAID
TO HR_FINANCE;

SHOW GRANTS FOR HR_FINANCE;

GRANT SELECT ON COMPANY.TOTALSALARY
TO HR_FINANCE;

SHOW GRANTS FOR HR_FINANCE;

################CREATE EMPLOYEE EXPERIENCE INTERN USER###########
DROP USER IF EXISTS EE_INTERN;
CREATE USER EE_INTERN IDENTIFIED BY 'Password';
SELECT HOST, USER	 FROM MYSQL.USER;

SHOW GRANTS FOR EE_INTERN;

GRANT SELECT ON COMPANY.WEEKLY_CAKE_ORDERS
TO EE_INTERN;

SHOW GRANTS FOR EE_INTERN;

